;; -*- mode: lisp; -*-
;; vi: ft=lisp

(in-package :stumpwm)
(setf *default-package* :stumpwm)

;;; Startup Commands
(when *initializing*
  (run-shell-command "xsetroot -cursor_name left_ptr")
  (run-shell-command "setxkbmap -option caps:ctrl_modifier")
  (run-shell-command "nitrogen --restore"))

(defvar *is-laptop* (string= "Ness-net"
                             (string-trim '(#\Newline) (run-shell-command "hostname" t))))

;;; Fixes
(defun ratio-or-pixel (length ratio) ; redefining this function...
  "Return a (rounded) ratio of length unless ratio is an integer.
If ratio is an integer return the number of pixel desired."
  (if (integerp ratio)
      ratio
      (round (* length ratio)))) ; <-- to fix this line

;;; Theme
(defparameter color-gold "#baa67f")
(setf *colors* '("#151515"   ;black
                 "#e06c75"   ;red
                 "#98c379"   ;green
                 "#d19a66"   ;yellow
                 "#7e9cd8"   ;blue
                 "#c678dd"   ;magenta
                 "#346475"   ;cyan
                 "#d1d1d1")) ;white

(update-color-map (current-screen))

(defparameter *mode-line-bg-color* (nth 0 *colors*))
(defparameter *mode-line-fg-color* (nth 7 *colors*))
(defparameter *msg-bg-color* (nth 0 *colors*))
(defparameter *msg-fg-color* (nth 7 *colors*))
(defparameter *msg-border-color* color-gold)

(set-bg-color *msg-bg-color*)
(set-fg-color *msg-fg-color*)
(set-border-color *msg-border-color*)
(set-focus-color color-gold)
(set-unfocus-color (nth 0 *colors*))
(set-float-focus-color color-gold)
(set-float-unfocus-color (nth 0 *colors*))

;;; Modules

;; Window gaps
(load-module "swm-gaps")
(setf swm-gaps:*inner-gaps-size* 3
      swm-gaps:*outer-gaps-size* 3
      swm-gaps:*head-gaps-size* 0)

(when *initializing*
  (swm-gaps:toggle-gaps-on))

;; Truetype fonts
;; (load-module "ttf-fonts")
;; (clx-truetype:cache-fonts)
;; (set-font (make-instance 'xft:font
;;                          :family "Roboto Mono"
;;                          :subfamily "Regular"
;;                          :size 16
;;                          :antialias t))
;; ...Or normal fonts
(set-font (if *is-laptop*
              "-*-fixed-*-r-normal-*-13-120-*-*-*-*-iso8859-*"
            "-*-terminus-*-r-normal-*-16-*-*-*-*-*-*-*"))

;; Session commands
(load-module "end-session")

;; Battery and Wifi
(load-module "battery-portable")
(load-module "wifi")

(setf *refresh-time* 30
      wifi:*wifi-modeline-fmt* "wifi: %p")

;;; Main Settings

(setf *mode-line-background-color* *mode-line-bg-color*
      *mode-line-border-color* *mode-line-bg-color*
      *mode-line-foreground-color* *mode-line-fg-color*
      *mode-line-timeout* 3
      *mode-line-pad-x* 13)

(setf *message-window-gravity* :center
      *window-border-style* :thin
      *new-window-preferred-frame* '(:empty :focused)
      *message-window-padding* 6
      *message-window-y-padding* 6
      *maxsize-border-width* 2
      *normal-border-width* 2
      *transient-border-width* 0
      stumpwm::*float-window-border* 2
      stumpwm::*float-window-title-height* 2)

(setf *input-window-gravity* :center
      *message-window-input-gravity* :left
      *input-completion-show-empty* nil)

(set-normal-gravity :center)
(set-maxsize-gravity :center)
(set-transient-gravity :center)

(set-msg-border-width 2)
(setf *timeout-wait* 5)
(setf *timeout-frame-indicator-wait* 0
      *suppress-frame-indicator* t)
(setf *mouse-focus-policy* :click)
(setf *resize-increment* 30)
(setf *run-or-raise-all-groups* nil)
(setf *startup-message* nil)

(setf *window-format* "(%n) %c"
      *group-format* "%n%s %t"
      *hidden-window-color* "^**"
      *mode-line-highlight-template* "[^(:fg \"#a566af\")~A^n]")

;;; Groups

(defparameter *group-names* (vector "one" "two" "three" "four" "five"))

(when *initializing*
  (grename (elt *group-names* 0))
  (gnewbg (elt *group-names* 1))
  (gnewbg (elt *group-names* 2))
  (gnewbg (elt *group-names* 3))
  (gnewbg (elt *group-names* 4)))

;;; Commands

(defcommand hsplit-and-focus () ()
  "create a new frame on the right and focus it."
  (hsplit)
  (move-focus :right))

(defcommand vsplit-and-focus () ()
  "create a new frame below and focus it."
  (vsplit)
  (move-focus :down))

(defcommand delete-window-and-frame () ()
  "Delete the current frame with its window."
  (delete-window)
  (remove-split))

(defcommand toggle-floating () ()
  "Toggle the floating state of the current window"
  (if (float-window-p (current-window))
      (unfloat-this)
    (float-this)))

(defcommand lock (&optional suspendp) ()
  "Lock the screen, and if @arg{suspendp} is non-nil, also suspend the system."
    (xlib:unmap-window (screen-message-window (current-screen)))
    (run-shell-command "slock")
    (when suspendp (run-shell-command "systemctl suspend")))

(defcommand screenshot () ()
  (make-script t "scrot" "full")
  (sleep 0.5)
  (message "Screenshot taken!"))

(defcommand hdmi-side () ()
  (run-shell-command "xrandr --output HDMI-A-0 --auto --right-of DP-0")
  (run-shell-command "nitrogen --restore")
  (enable-mode-line-everywhere))

(defcommand hdmi-reset () ()
  (run-shell-command "xrandr --output DP-0 --auto"))

(defcommand clean-resize-direction (d)
  ((:direction "Direction: "))
  "Resize frame to direction @var{d} without showing frame borders."
  (resize-direction d)
  (clear-frame-outlines (current-group)))

(defcommand term (&optional program) ()
  "Invoke a terminal, possibly with a @arg{program}."
  (sb-thread:make-thread (lambda ()
                           (run-shell-command (if program
                                                  (format nil "st ~A" program)
                                                  "st")))))

(defcommand chromium () ()
  "Start Ungoogled Chromium or switch to it, if it is already running on any group."
  (sb-thread:make-thread (lambda ()
                           (run-or-raise "ungoogled-chromium" '(:class "Chromium-browser") t nil))))

(defcommand firefox () ()
  "Start Firefox or switch to it, if it is already running on any group."
  (sb-thread:make-thread (lambda ()
                           (run-or-raise "firefox" '(:class "firefox") t nil))))

(defcommand emacsclient () ()
  "Start the Emacs client or switch to it, if it is already running on any group. If no client is running, a new instance is created."
  (sb-thread:make-thread (lambda ()
                           (run-or-raise "emacsclient -a 'emacs' -c" '(:class "Emacs") t nil))))

(defcommand dired () ()
  "Start Dired on the Emacs client or switch to it, if it is already running on any group. If no client is running, a new instance is created."
  (sb-thread:make-thread (lambda ()
                           (run-or-raise "emacsclient -a 'emacs' -c" '(:class "Emacs") t nil)
                           (run-shell-command "emacsclient -e '(dired nil)'"))))


(defcommand file-manager () ()
  "Start PCManFM or switch to it, if it is already running on the current group (any screen)."
  (sb-thread:make-thread (lambda ()
                           (run-or-raise "pcmanfm" '(:class "Pcmanfm") nil t))))

(defcommand music-player () ()
  "Start Qmmp or switch to it, if it is already running on any group."
  (sb-thread:make-thread (lambda ()
                           (run-or-raise "qmmp" '(:class "qmmp") t nil))))

(defcommand mpc () ()
  "Start mpc-mode on the Emacs client or switch to it, if it is already running on any group. If no client is running, a new instance is created."
  (sb-thread:make-thread (lambda ()
                           (run-or-raise "emacsclient -a 'emacs' -c" '(:class "Emacs") t nil)
                           (run-shell-command "emacsclient -e '(mpc)'"))))

(defcommand steam () ()
  "Start Steam or switch to it, if it is already running on any group."
  (sb-thread:make-thread (lambda ()
                           (run-or-raise "steam" '(:class "steam") t nil))))

(defcommand spotify () ()
  "Start Spotify or switch to it, if it is already running on any group."
  (sb-thread:make-thread (lambda ()
                           (run-or-raise "spotify" '(:class "Spotify") t nil))))

(defcommand mail () ()
  "Start Thunderbird or switch to it, if it is already running on any group."
  (sb-thread:make-thread (lambda ()
                           (run-or-raise "thunderbird" '(:class "thunderbird") t nil))))

(defcommand discord () ()
  "Start Discord (WebCord) or switch to it, if it is already running on any group."
  (sb-thread:make-thread (lambda ()
                           (run-or-raise "webcord" '(:class "WebCord") t nil))))

;; Slynk (Swank for Sly)
;; parecido, con slime:
;;   https://www.kaashif.co.uk/2015/06/28/hacking-stumpwm-with-common-lisp/
;; con sly:
;;   https://www.reddit.com/r/stumpwm/comments/ouuh1c/how_to_connect_sly_to_stumpwm_to_modifying_it_in/

(require :slynk)

(defvar *slynk-port* 4004)
(defvar *slynk-started* nil)

(defcommand sly-start-server () ()
  "Start a slynk server for sly."
  (sb-thread:make-thread (lambda ()
                           (slynk:create-server :port *slynk-port* :dont-close t)
                           (setf *slynk-started* t))))

(defcommand sly-stop-server () ()
  "Stop current slynk server for sly."
  (sb-thread:make-thread (lambda ()
                           (slynk:stop-server *slynk-port*)
                           (setf *slynk-started* nil))))

;;; Modeline Settings

(let ((separator " ^(:fg \"#626262\");^n "))
  (setf *time-modeline-string* "%a %d de %b, %H:%M"
        *screen-mode-line-format* (list
                                   ;; Groups
                                   "group: "
                                   "^(:fg \"#baa67f\")%n^n"
                                   separator
                                   ;; Windows
                                   "%v"
                                   ;; Pad to right
                                   "^>"
                                   ;; Battery
                                   (when *is-laptop*
                                     (concatenate 'string "bat: %B" separator)) 
                                   ;; Network
                                   "net: "
                                   '(:eval
                                     (concatenate 'string
                                      "^(:fg \"#98c379\")"
                                      (first (cl-ppcre:split " "
                                              (run-shell-command "hostname -I" t)))
                                      "^n"))
                                   (when *is-laptop* " (%I)")
                                   separator
                                   ;; Slynk
                                   "slynk: "
                                   '(:eval
                                     (if *slynk-started*
                                         (concatenate 'string
                                                      "^(:fg \"#e06c75\")"
                                                      (write-to-string *slynk-port*)
                                                      "^n")
                                         "-"))
                                   separator
                                   ;; Steam
                                   "steam: "
                                   '(:eval
                                     (if (string= "" (run-shell-command "pidof steam" t))
                                         "-"
                                         "running"))
                                   separator
                                   ;; Date
                                   '(:eval
                                     (run-shell-command "date '+%a %d de %b, %H:%M'" t)))))

(defun enable-mode-line-everywhere ()
  (loop for screen in *screen-list* do
    (loop for head in (screen-heads screen) do
      (enable-mode-line screen head t))))

(enable-mode-line-everywhere)

;;; Hooks

(defparameter *floating-classes* '("Sxiv" "mpv"))

(defun float-if-match (window)
  "Makes a new window floating if its class matches."
  (when (member (window-class window) *floating-classes* :test #'string=)
    (float-window window (current-group))
    (let ((w (* (screen-width (current-screen)) 55/96))
          (h (* (screen-height (current-screen)) 5/6)))
      (float-window-move-resize window :width w :height h
                                       :x (- (/ (screen-width (current-screen)) 2) (/ w 2))
                                       :y (- (/ (screen-height (current-screen)) 2) (/ h 2))))
    (group-focus-window (current-group) window)))

(add-hook *new-window-hook* #'float-if-match)

;;; Key mappings

(defparameter *script-manager* "scriptctl")

(defun make-script (exec &optional name arg)
  "Make a script command string using `*script-manager*', and optionally a script name and an argument.
If exec is non-nil, the shell command will be run from this function, else it will return the string."
  (let ((cmd (concatenate 'string *script-manager* " " name " " arg)))
    (if exec
        (run-shell-command cmd)
        (concatenate 'string "run-shell-command " cmd))))

;; Root map
(set-prefix-key (kbd "s-SPC"))
(define-key *root-map* (kbd "ESC") "abort")
(define-key *root-map* (kbd "q") "logout")
(define-key *root-map* (kbd "v") "hsplit-and-focus")
(define-key *root-map* (kbd "s") "vsplit-and-focus")
(define-key *root-map* (kbd "L") "lock")
(define-key *root-map* (kbd "F") "fullscreen")

(undefine-key *root-map* (kbd "r"))
(define-key *root-map* (kbd "r") "remove")
(undefine-key *root-map* (kbd "R"))
(define-key *root-map* (kbd "R") "iresize")

;; Windows
(define-key *top-map* (kbd "s-h") "move-focus left")
(define-key *top-map* (kbd "s-j") "move-focus down")
(define-key *top-map* (kbd "s-k") "move-focus up")
(define-key *top-map* (kbd "s-l") "move-focus right")

(define-key *top-map* (kbd "s-H") "move-window left")
(define-key *top-map* (kbd "s-J") "move-window down")
(define-key *top-map* (kbd "s-K") "move-window up")
(define-key *top-map* (kbd "s-L") "move-window right")

(define-key *top-map* (kbd "s-M-h") "clean-resize-direction left")
(define-key *top-map* (kbd "s-M-j") "clean-resize-direction down")
(define-key *top-map* (kbd "s-M-k") "clean-resize-direction up")
(define-key *top-map* (kbd "s-M-l") "clean-resize-direction right")

(define-key *top-map* (kbd "s-c") "pull-hidden-next")
(define-key *top-map* (kbd "s-n") "fnext")
(define-key *top-map* (kbd "s-p") "fprev")
(define-key *top-map* (kbd "s-v") "windowlist")
(define-key *top-map* (kbd "s-f") "fullscreen")
(define-key *top-map* (kbd "s-t") "toggle-floating")
(define-key *top-map* (kbd "s-x") *exchange-window-map*)

(define-key *top-map* (kbd "s-w") "delete")
(define-key *top-map* (kbd "s-q") "remove")

(defvar *window-split-map* nil
  "The keymap that frame splitting key bindings sit on.")

(fill-keymap *window-split-map*
             (kbd "s") "vsplit-and-focus"
             (kbd "v") "hsplit-and-focus"
             (kbd "o") "only"
             (kbd "r") "remove")
(define-key *top-map* (kbd "s-s") *window-split-map*)

;; Groups
(define-key *top-map* (kbd "s-1") (concat "gselect " (elt *group-names* 0)))
(define-key *top-map* (kbd "s-2") (concat "gselect " (elt *group-names* 1)))
(define-key *top-map* (kbd "s-3") (concat "gselect " (elt *group-names* 2)))
(define-key *top-map* (kbd "s-4") (concat "gselect " (elt *group-names* 3)))
(define-key *top-map* (kbd "s-5") (concat "gselect " (elt *group-names* 4)))

(define-key *top-map* (kbd "s-!") (concat "gmove " (elt *group-names* 0)))
(define-key *top-map* (kbd "s-\"") (concat "gmove " (elt *group-names* 1)))
(define-key *top-map* (kbd "s-periodcentered") (concat "gmove " (elt *group-names* 2)))
(define-key *top-map* (kbd "s-$") (concat "gmove " (elt *group-names* 3)))
(define-key *top-map* (kbd "s-%") (concat "gmove " (elt *group-names* 4)))

;; Utils
(define-key *top-map* (kbd "s-g") "abort")
(define-key *top-map* (kbd "s-R") "loadrc")
(define-key *top-map* (kbd "s-Q") "logout")
(define-key *top-map* (kbd "s-ESC") "lock")
(define-key *top-map* (kbd "s-BackSpace") "colon")

;; Programs
(define-key *top-map* (kbd "s-RET") "term")
(define-key *top-map* (kbd "s-b") "firefox")
(define-key *top-map* (kbd "s-e") "emacsclient")
(define-key *top-map* (kbd "s-a") "file-manager")
(define-key *top-map* (kbd "s-m") "music-player")
(define-key *top-map* (kbd "s-d") "run-shell-command dmenu_run -h 12 -c -g 3 -l 10")

;; Scripts
(define-key *top-map* (kbd "s-Print") "screenshot")
(define-key *top-map* (kbd "s-Insert") (make-script nil "snippet" "load"))
(define-key *top-map* (kbd "s-+") (make-script nil "volume" "up"))
(define-key *top-map* (kbd "s--") (make-script nil "volume" "down"))

(defvar *scripts-map* nil
  "The keymap that script-related key bindings sit on.")

(fill-keymap *scripts-map*
             (kbd "r") (make-script nil)
             (kbd "m") (make-script nil "music")
             (kbd "o") (make-script nil "sinks")
             (kbd "p") (make-script nil "pass")
             (kbd "s") (make-script nil "scrot")
             (kbd "k") (make-script nil "kill")
             (kbd "l") (make-script nil "steamapp")
             (kbd "q") (make-script nil "quit"))
(define-key *top-map* (kbd "s-r") *scripts-map*)

(setf *startup-message* "¡^2StumpWM^n está listo!")
