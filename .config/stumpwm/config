;;; -*- mode: lisp; -*-

;;; vi: ft=lisp

(in-package :stumpwm)

;;; Startup Commands

(defvar *first-run* t)

(defun startup-programs ()
  (sb-thread:make-thread
   (lambda ()
     (run-shell-command "nitrogen --restore")
     (when *first-run*
       (run-shell-command "xsetroot -cursor_name left_ptr")
       (run-shell-command "setxkbmap -option caps:ctrl_modifier")
       (setf *first-run* nil)))
   :name "startup-programs"))

(add-hook *start-hook* #'startup-programs)

;;; Theme
(setf *colors*
      '("#151515"   ;black
        "#e06c75"   ;red
        "#98c379"   ;green
        "#d19a66"   ;yellow
        "#7e9cd8"   ;blue
        "#c678dd"   ;magenta
        "#346475"   ;cyan
        "#d1d1d1")) ;white

(update-color-map (current-screen))

(defparameter *mode-line-bg-color* (nth 0 *colors*))
(defparameter *mode-line-fg-color* (nth 7 *colors*))
(defparameter *msg-bg-color* (nth 0 *colors*))
(defparameter *msg-fg-color* (nth 7 *colors*))
(defparameter *msg-border-color* (nth 6 *colors*))

(set-bg-color *msg-bg-color*)
(set-fg-color *msg-fg-color*)
(set-border-color *msg-border-color*)
(set-focus-color (nth 6 *colors*))
(set-unfocus-color (nth 0 *colors*))
(set-float-focus-color (nth 6 *colors*))
(set-float-unfocus-color (nth 0 *colors*))

;;; Gapping
(load-module "swm-gaps")
(setf swm-gaps:*inner-gaps-size* 3
      swm-gaps:*outer-gaps-size* 3
      swm-gaps:*head-gaps-size* 0)

(when *initializing*
  (swm-gaps:toggle-gaps-on))

;;; Decent fonts
(load-module "ttf-fonts")
(clx-truetype:cache-fonts)
(set-font (make-instance 'xft:font
                         :family "mononoki Nerd Font Mono"
                         :subfamily "Regular"
                         :size 14
                         :antialias t))

;;; Basic Settings
(setf *window-format* "%m%s%35t")

(setf *mode-line-background-color* *mode-line-bg-color*
      *mode-line-border-color* *mode-line-bg-color*
      *mode-line-foreground-color* *mode-line-fg-color*
      *mode-line-timeout* 1)

(setf *message-window-gravity* :center
      *window-border-style* :thin
      *message-window-padding* 6
      *message-window-y-padding* 6
      *maxsize-border-width* 2
      *normal-border-width* 2
      *transient-border-width* 2
      stumpwm::*float-window-border* 2
      stumpwm::*float-window-title-height* 2)

(setf *input-window-gravity* :center
      *message-window-input-gravity* :left
      *input-completion-show-empty* nil)

(set-msg-border-width 2)

(setf *timeout-wait* 3)
(setf *timeout-frame-indicator-wait* 0)

;; Focus Follow Mouse
(setf *mouse-focus-policy* :sloppy)

;; Don't jump between groups when switching apps
(setf *run-or-raise-all-groups* nil)

;; startup message
;; (setf *startup-message* "Welcome back to ^1Stumpwm^n!")
(setf *startup-message* nil)

;;; Groups
(gnew "one")
(gnewbg "two")
(gnewbg "three")
(gnewbg "four")
(gnewbg "five")

;;; Splits
(defcommand hsplit-and-focus () ()
  "create a new frame on the right and focus it."
  (hsplit)
  (move-focus :right))

(defcommand vsplit-and-focus () ()
  "create a new frame below and focus it."
  (vsplit)
  (move-focus :down))

(define-key *root-map* (kbd "v") "hsplit-and-focus")
(define-key *root-map* (kbd "s") "vsplit-and-focus")

;;; Modeline Settings
(load-module "battery-portable")
(load-module "wifi")

(let ((is-laptop nil))
  (when is-laptop
    (setf *refresh-time* 30
          wifi:*wifi-modeline-fmt* "Wifi: %p"))
  (setf *time-modeline-string* "%a %d de %b, %H:%M"
        *screen-mode-line-format* (list
                                   ;; Groups
                                   " ^7[^(:fg \"#56b6c2\")%n^7] "
                                   ;; Pad to right
                                   "^>"
                                   ;; Battery
                                   (when is-laptop "^n%B, ") 
                                   ;; Wifi
                                   (when is-laptop "^n%I, ") 
                                   ;; Date
                                   "^n%d ")))

(defun enable-mode-line-everywhere ()
  (loop for screen in *screen-list* do
    (loop for head in (screen-heads screen) do
      (enable-mode-line screen head t))))

(enable-mode-line-everywhere)

;; Commands

(defcommand lock () ()
  "Lock the screen, and if suspendp is non-nil, also suspend the system."
  (let ((suspendp (y-or-n-p (format nil "Suspend the system as well? "))))
    (xlib:unmap-window (screen-message-window (current-screen)))
    (run-shell-command "slock")
    (when suspendp (run-shell-command "systemctl suspend"))))

(defcommand firefox () ()
  "Start Firefox or switch to it, if it is already running."
  (run-or-raise "firefox" '(:class "firefox")))

(defcommand emacsclient () ()
  "Start the Emacs client or switch to it, if it is already running. If no client is running, a new instance is created."
  (run-or-raise "emacsclient -a 'emacs' -c" '(:class "Emacs")))

(defcommand dired () ()
  "Start Dired on the Emacs client or switch to it, if it is already running. If no client is running, a new instance is created."
  (run-or-raise "emacsclient -a 'emacs' -c" '(:class "Emacs"))
  (run-shell-command "emacsclient -e '(dired nil)'"))

(defcommand steam () ()
  "Start Steam or switch to it, if it is already running on any group."
  (let ((*run-or-raise-all-groups* t))
    (run-or-raise "steam" '(:class "steam"))))

(defcommand discord () ()
  "Start Discord (WebCord) or switch to it, if it is already running on any group."
  (let ((*run-or-raise-all-groups* t))
    (run-or-raise "discord" '(:class "WebCord"))))

(defcommand shutdown () ()
  (run-shell-command "shutdown -h now"))

(defcommand screenshot () ()
  (make-script t "scrot")
  (sleep 0.5)
  (message "Screenshot taken!"))

(defcommand hdmi-side () ()
  (run-shell-command "xrandr --output HDMI-A-0 --auto --right-of DP-0")
  (run-shell-command "nitrogen --restore")
  (enable-mode-line-everywhere))

(defcommand hdmi-reset () ()
  (run-shell-command "xrandr --output DP-0 --auto"))

;; Key mappings

; Prefix Key (Super-x)
(set-prefix-key (kbd "s-x"))

(define-key *root-map* (kbd "ESC") "abort")

; turn on/off the mode line for the current head only.
(define-key *top-map* (kbd "s-B") "mode-line")

; Toggle gaps
(define-key *top-map* (kbd "s-G") "toggle-gaps")

; Window Focusing
(define-key *top-map* (kbd "s-h") "move-focus left")
(define-key *top-map* (kbd "s-j") "move-focus down")
(define-key *top-map* (kbd "s-k") "move-focus up")
(define-key *top-map* (kbd "s-l") "move-focus right")
(define-key *top-map* (kbd "s-g") "windowlist")
(define-key *top-map* (kbd "s-n") "pull-hidden-next")
(define-key *top-map* (kbd "s-p") "pull-hidden-previous")

; Window Movement
(define-key *top-map* (kbd "s-H") "move-window left")
(define-key *top-map* (kbd "s-J") "move-window down")
(define-key *top-map* (kbd "s-K") "move-window up")
(define-key *top-map* (kbd "s-L") "move-window right")

; Split and maximizing
(define-key *top-map* (kbd "s-s") "vsplit")
(define-key *top-map* (kbd "s-v") "hsplit")
(define-key *top-map* (kbd "s-o") "only")
(define-key *top-map* (kbd "s-r") "remove")
(define-key *top-map* (kbd "s-f") "fullscreen")

; Kill windows
(define-key *top-map* (kbd "s-c") "delete")
(define-key *top-map* (kbd "s-C") "kill")

; Session
(define-key *top-map* (kbd "s-Q") "quit-confirm")
(define-key *top-map* (kbd "s-R") "restart-hard")

; Groups
(define-key *top-map* (kbd "s-1") "gselect one")
(define-key *top-map* (kbd "s-2") "gselect two")
(define-key *top-map* (kbd "s-3") "gselect three")
(define-key *top-map* (kbd "s-4") "gselect four")
(define-key *top-map* (kbd "s-5") "gselect five")

(define-key *top-map* (kbd "s-!") "gmove one")
(define-key *top-map* (kbd "s-\"") "gmove two")
(define-key *top-map* (kbd "s-periodcentered") "gmove three")
(define-key *top-map* (kbd "s-$") "gmove four")
(define-key *top-map* (kbd "s-%") "gmove five")

(define-key *top-map* (kbd "s-ESC") "lock")

;; Programs
(define-key *top-map* (kbd "s-d") "run-shell-command dmenu_run -i -p 'Run:'")
(define-key *top-map* (kbd "s-RET") "run-shell-command st")
(define-key *top-map* (kbd "s-b") "firefox")
(define-key *top-map* (kbd "s-e") "emacsclient")
(define-key *top-map* (kbd "s-w") "dired")
(define-key *top-map* (kbd "s-W") "run-shell-command pcmanfm")

;; Scripts
(defparameter *script-manager* "scriptctl")

(defun make-script (exec &optional name arg)
  "Make a script command string using `*script-manager*', and optionally a script name and an argument.
If exec is non-nil, the shell command will be run from this function, else it will return the string."
  (let ((cmd (concatenate 'string *script-manager* " " name " " arg)))
    (if exec
        (run-shell-command cmd)
        (concatenate 'string "run-shell-command " cmd))))

(define-key *top-map* (kbd "s-Print") "screenshot")
(define-key *top-map* (kbd "s-Insert") (make-script nil "snippet" "load"))
(define-key *top-map* (kbd "s-m") (make-script nil "music"))
(define-key *top-map* (kbd "s-+") (make-script nil "volume" "up"))
(define-key *top-map* (kbd "s--") (make-script nil "volume" "down"))
(define-key *top-map* (kbd "s-O") (make-script nil "sinks"))
(define-key *top-map* (kbd "s-S") (make-script nil "steamapp"))
(define-key *top-map* (kbd "s-P") (make-script nil "pass"))
(define-key *top-map* (kbd "s-y") (make-script nil))

;; clx-truetype memory leak fix
;; (run-with-timer
;;  900 900
;;  (lambda ()
;;    (loop for font in (stumpwm::screen-fonts (current-screen))
;;          when (typep font 'xft:font)
;;            do (clrhash (xft::font-string-line-bboxes font))
;;               (clrhash (xft::font-string-line-alpha-maps font))
;;               (clrhash (xft::font-string-bboxes font))
;;               (clrhash (xft::font-string-alpha-maps font)))))

;; slynk
                                        ; parecido, con slime:
                                        ;   https://www.kaashif.co.uk/2015/06/28/hacking-stumpwm-with-common-lisp/
                                        ; con sly:
                                        ;   https://www.reddit.com/r/stumpwm/comments/ouuh1c/how_to_connect_sly_to_stumpwm_to_modifying_it_in/

(require :slynk)

(defcommand slynk (port) ((:string "Port number: "))
  (sb-thread:make-thread
   (lambda ()
     (slynk:create-server
      :port (parse-integer port)
      :dont-close t))
   :name "slynk-manual"))
