;; -*- mode: lisp; -*-
;; vi: ft=lisp

(in-package :stumpwm)
(setf *default-package* :stumpwm)

;;; Setup
(defvar *is-laptop* (string= "Ness-net" (string-trim '(#\Newline) (run-shell-command "hostname" t)))
  "Whether StumpWM is running on my laptop or a similar device.")

(defvar *config-path* (uiop:native-namestring "~/.config/stumpwm/")
  "Where the user configuration files are located.")

(defun v/load (filename)
  "Load @arg{filename} (without extension) from the `*config-path*'. Compiled files are preferred."
  (let ((file-comp (concat *config-path* filename ".fasl"))
        (file (concat *config-path* filename ".lisp")))
    (cond
      ((probe-file file-comp) (load file-comp))
      ((probe-file file) (load file))
      (t (message (format nil "File ~A not found!" filename))))))

(defmacro v/compile (filename)
  "Compile a file from the `*config-path*'. Meant to be used from the REPL."
  `(compile-file
    (concat *config-path* ,(string-downcase (write-to-string filename)) ".lisp")))

(defun startup-shell-commands ()
  "Shell commands to run once when StumpWM starts."
  (sb-thread:make-thread (lambda ()
                           (run-shell-command "xsetroot -cursor_name left_ptr")
                           (run-shell-command "setxkbmap -option caps:ctrl_modifier")
                           (run-shell-command "nitrogen --restore")
                           (sb-thread:return-from-thread 0))))

(add-hook *start-hook* #'startup-shell-commands)

;;; Fixes
(defun ratio-or-pixel (length ratio)
  "Return a (rounded) ratio of length unless ratio is an integer.
If ratio is an integer return the number of pixel desired."
  (if (integerp ratio)
      ratio
      (round (* length ratio)))) ; fixing this line

(v/load "modeline-v2")

;;; Theme
(defparameter color-gold "#baa67f")
(setf *colors* '("#151515"   ;black
                 "#e06c75"   ;red
                 "#98c379"   ;green
                 "#d19a66"   ;yellow
                 "#7e9cd8"   ;blue
                 "#c678dd"   ;magenta
                 "#346475"   ;cyan
                 "#d1d1d1")) ;white

(update-color-map (current-screen))

(defparameter *mode-line-bg-color* (nth 0 *colors*))
(defparameter *mode-line-fg-color* (nth 7 *colors*))
(defparameter *msg-bg-color* (nth 0 *colors*))
(defparameter *msg-fg-color* (nth 7 *colors*))
(defparameter *msg-border-color* color-gold)

(set-bg-color *msg-bg-color*)
(set-fg-color *msg-fg-color*)
(set-border-color *msg-border-color*)
(set-focus-color color-gold)
(set-unfocus-color (nth 0 *colors*))
(set-float-focus-color color-gold)
(set-float-unfocus-color (nth 0 *colors*))

;;; Modules

;; Window gaps
(load-module "swm-gaps")
(setf swm-gaps:*inner-gaps-size* 3
      swm-gaps:*outer-gaps-size* 3
      swm-gaps:*head-gaps-size* 0)

(when *initializing*
  (swm-gaps:toggle-gaps-on))

;; Truetype fonts
;; (load-module "ttf-fonts")
;; (xft:cache-fonts)
;; (set-font (make-instance 'xft:font
;;                          :family "Roboto Mono"
;;                          :subfamily "Regular"
;;                          :size 16))
;; ...Or normal fonts
(set-font (if *is-laptop*
              "-*-fixed-*-r-normal-*-13-120-*-*-*-*-iso8859-*"
            "-*-terminus-*-r-normal-*-16-*-*-*-*-*-*-*"))

;; Session commands
(load-module "end-session")

;; Battery and Wifi
(load-module "battery-portable")
(load-module "wifi")

(setf *refresh-time* 30
      wifi:*wifi-modeline-fmt* "wifi: %p")

;;; Main Settings
(setf *mode-line-background-color* *mode-line-bg-color*
      *mode-line-border-color* *mode-line-bg-color*
      *mode-line-foreground-color* *mode-line-fg-color*
      *mode-line-timeout* 3
      *mode-line-pad-x* 13)

(setf *message-window-gravity* :center
      *window-border-style* :thin
      *new-window-preferred-frame* '(:empty :focused)
      *message-window-padding* 6
      *message-window-y-padding* 6
      *maxsize-border-width* 2
      *normal-border-width* 2
      *transient-border-width* 0
      stumpwm::*float-window-border* 2
      stumpwm::*float-window-title-height* 2)

(setf *input-window-gravity* :center
      *message-window-input-gravity* :left
      *input-completion-show-empty* nil)

(set-normal-gravity :center)
(set-maxsize-gravity :center)
(set-transient-gravity :center)

(set-msg-border-width 2)
(setf *timeout-wait* 5)
(setf *timeout-frame-indicator-wait* 0
      *suppress-frame-indicator* t)
(setf *mouse-focus-policy* :click)
(setf *resize-increment* 30)
(setf *run-or-raise-all-groups* nil)
(setf *startup-message* nil)

;;; Groups
(defparameter *group-names* (vector "one" "two" "three" "four" "five"))

(when *initializing*
  (grename (elt *group-names* 0))
  (gnewbg (elt *group-names* 1))
  (gnewbg (elt *group-names* 2))
  (gnewbg (elt *group-names* 3))
  (gnewbg (elt *group-names* 4)))

;;; Slynk (Swank for Sly)
;; parecido, con slime:
;;   https://www.kaashif.co.uk/2015/06/28/hacking-stumpwm-with-common-lisp/
;; con sly:
;;   https://www.reddit.com/r/stumpwm/comments/ouuh1c/how_to_connect_sly_to_stumpwm_to_modifying_it_in/
(require :slynk)

(defvar *slynk-port* 4004)
(defvar *slynk-started* nil)

;;; Commands
(v/load "commands")

;;; Modeline Settings
(let ((separator " ^(:fg \"#626262\");^n "))
  (setf *window-format* "%n:%c"
        *group-format* "%n%s:%t"
        *hidden-window-color* "^**" ; "^(:fg \"#8e8e8e\")"
        *mode-line-highlight-template* "[^(:fg \"#a566af\")~A^n]"
        *time-modeline-string* "%a %d de %b, %H:%M"
        *screen-mode-line-format* (list
                                   ;; Groups
                                   "group: "
                                   "^(:fg \"#baa67f\")%n^n"
                                   separator
                                   ;; Windows
                                   "%v"
                                   ;; Pad to right
                                   "^>"
                                   ;; Battery
                                   (when *is-laptop*
                                     (concatenate 'string "bat: %B" separator))
                                   ;; Network
                                   "net: "
                                   '(:eval
                                     (concatenate 'string
                                      "^(:fg \"#98c379\")"
                                      (first (cl-ppcre:split " "
                                              (run-shell-command "hostname -I" t)))
                                      "^n"))
                                   (when *is-laptop* " (%I)")
                                   separator
                                   ;; Slynk
                                   "slynk: "
                                   '(:eval
                                     (if *slynk-started*
                                         (concatenate 'string
                                                      "^(:fg \"#e06c75\")"
                                                      (write-to-string *slynk-port*)
                                                      "^n")
                                         "-"))
                                   separator
                                   ;; Steam
                                   "steam: "
                                   '(:eval
                                     (if (string= "" (run-shell-command "pidof steam" t))
                                         "-"
                                         "running"))
                                   separator
                                   ;; Date
                                   '(:eval
                                     (run-shell-command "date '+%a %d de %b, %H:%M'" t)))))

(defun enable-mode-line-everywhere ()
  (loop for screen in *screen-list* do
    (loop for head in (screen-heads screen) do
      (enable-mode-line screen head t))))

(enable-mode-line-everywhere)

;;; Hooks
(defparameter *floating-classes* '("Sxiv" "mpv"))

(defun float-if-match (window)
  "Makes a new window floating if its class matches."
  (when (member (window-class window) *floating-classes* :test #'string=)
    (float-window window (current-group))
    (let* ((w (round (* (screen-width (current-screen)) 55/96)))
           (h (round (* (screen-height (current-screen)) 5/6)))
           (x (round (- (/ (screen-width (current-screen)) 2) (/ w 2))))
           (y (round (- (/ (screen-height (current-screen)) 2) (/ h 2)))))
      (float-window-move-resize window :width w :height h :x x :y y))
    (group-focus-window (current-group) window)))

(unless *is-laptop*
  (add-hook *new-window-hook* #'float-if-match))

(defun sly-stop-server-now ()
  (when *slynk-started*
    (slynk:stop-server *slynk-port*)
    (setf *slynk-started* nil)))

(add-hook *restart-hook* #'sly-stop-server-now)
(add-hook *quit-hook* #'sly-stop-server-now)

;;; Key mappings
(defparameter *script-manager* "scriptctl")

(defun make-script (exec &optional name arg)
  "Make a script command string using `*script-manager*', and optionally a script name and an argument.
If exec is non-nil, the shell command will be run from this function, else it will return the string."
  (let ((cmd (concatenate 'string *script-manager* " " name " " arg)))
    (if exec
        (run-shell-command cmd)
        (concat "run-shell-command " cmd))))

(v/load "keys")

;;; End
(setf *startup-message* "¡^2StumpWM^n está listo!")
